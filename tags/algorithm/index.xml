<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Algorithm on</title><link>https://garden.itodorova.dev/tags/algorithm/</link><description>Recent content in Algorithm on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://garden.itodorova.dev/tags/algorithm/index.xml" rel="self" type="application/rss+xml"/><item><title>Dijkstra's Algorithm</title><link>https://garden.itodorova.dev/notes/math/discrete-math/graph-theory/Dijkstras-Algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://garden.itodorova.dev/notes/math/discrete-math/graph-theory/Dijkstras-Algorithm/</guid><description>Dijkstra&amp;rsquo;s Aglorithm is used to find the shortest path between two [[notes/math/discrete-math/graph-theory/Vertex|vertices]] (nodes) in a [[notes/math/discrete-math/graph-theory/Weighted Graph|weighted graph]].
Steps Let the node at which we are starting be called the initial node.</description></item><item><title>Extended Euclidean Algorithm</title><link>https://garden.itodorova.dev/notes/math/discrete-math/number-theory/Extended-Euclidean-Algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://garden.itodorova.dev/notes/math/discrete-math/number-theory/Extended-Euclidean-Algorithm/</guid><description>The extended Euclidean algorithm is an algorithm to compute integers xx and yy such that
$$ax + by = gcd(a,b)$$</description></item><item><title>Fleury's Algorithm</title><link>https://garden.itodorova.dev/notes/math/discrete-math/graph-theory/Fleurys-Algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://garden.itodorova.dev/notes/math/discrete-math/graph-theory/Fleurys-Algorithm/</guid><description>Fleury&amp;rsquo;s Algorithm is used to find [[notes/math/discrete-math/graph-theory/Euler Circuit|Euler circuits]] or [[notes/math/discrete-math/graph-theory/Euler Trail|Euler trails]].
Consider a graph known to have all edges in the same component and at most two vertices of odd degree.</description></item><item><title>Gaus-Jordan Elimination</title><link>https://garden.itodorova.dev/notes/math/linear-algebra/Gaus-Jordan-Elimination/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://garden.itodorova.dev/notes/math/linear-algebra/Gaus-Jordan-Elimination/</guid><description>An algorithm that uses [[notes/math/linear-algebra/Simple row operation|simple row operations]] to bring a [[notes/math/linear-algebra/Matrix|matrix]] into [[notes/math/linear-algebra/Row-echelon form|row-echelon form]].
Steps:
optional: Pull out any scalars from each row in the matrix.</description></item></channel></rss>